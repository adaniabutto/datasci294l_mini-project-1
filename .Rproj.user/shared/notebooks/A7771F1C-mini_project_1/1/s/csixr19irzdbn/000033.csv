"0",""
"0","# predictions for MC items"
"0",""
"0","# define parameters"
"0","theta = .5 # chance the simulated student eliminates a given response option"
"0","elim_prop  = .75 # student eliminates max 75 % of wrong options"
"0","n_sim = 426 # we simulate N = 426 respondents"
"0",""
"0","# define function to get prediction for each MC item"
"0","get_mc_pred ="
"0","  function(opts_string, n_sim, theta, elim_prop) {"
"0","    # count number of answer choices"
"0","    n_options = str_count(opts_string, "","") + 1"
"0","    # define number of wrong options as number of options minus 1"
"0","    k_wrong = n_options - 1"
"0","    if (k_wrong == 0) return(1)"
"0","    # set dynamic maximum of eliminated options (â‰¥ 50% of options)"
"0","    max_elim = floor(elim_prop * k_wrong)"
"0","    # chance the student successfully eliminates any single wrong option based on parameters above"
"0","    n_elim = pmin(rbinom(n_sim, k_wrong, theta), max_elim)"
"0","    # remaining wrong options is number as wrong options minus eliminated options"
"0","    remain_wrong = k_wrong - n_elim"
"0","    # calculate expected probability of dplyr::selecting correct response"
"0","    mean(1 / (remain_wrong + 1))"
"0","  }"
"0",""
"0","pred_mc ="
"0","  df.binaryvsmc %>% "
"0","  filter(item_type == ""mc"") %>% "
"0","  distinct(item_id, possible_responses) %>%"
"0","  mutate("
"0","    proportion_correct = round("
"0","      100 * map_dbl("
"0","        possible_responses,"
"0","        ~ get_mc_pred(.x,"
"0","                      n_sim = n_sim,"
"0","                      theta = theta,"
"0","                      elim_prop = elim_prop)"
"0","        ), 2) # round to two digits"
"0","  ) %>% "
"0","  dplyr::select(item_id, proportion_correct)"
"0",""
